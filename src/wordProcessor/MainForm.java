/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wordProcessor;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import javax.swing.Action;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.io.IOException;
import java.io.InputStream;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyledDocument;
import javax.swing.text.StyledEditorKit;
import javax.swing.text.rtf.RTFEditorKit;

/**
 *
 * @author spatel7043
 */
public class MainForm extends javax.swing.JFrame {

    private final RTFEditorKit rtfKit = new RTFEditorKit();

    /**
     * Creates new form MainForm
     */
    JFileChooser fileDialog;
    File editFile;
    Color selectedColor;
    Action changeFontColorAction;

    public MainForm() {
        initComponents();

        textArea.setEditorKit(rtfKit); //setting editor kit to rtfKit
        selectedColor = Color.BLACK; //setting default colour in colour chooser to black

        Action boldAction = new StyledEditorKit.BoldAction();
        boldAction.putValue(Action.NAME, "Bold Text");
        bold.setAction(boldAction); //setting bold action to the bold menu item 

        Action underlineAction = new StyledEditorKit.UnderlineAction();
        underlineAction.putValue(Action.NAME, "Underline Text");
        underline.setAction(underlineAction); //setting underline action to the underline menu item

        Action italicizeAction = new StyledEditorKit.ItalicAction();
        italicizeAction.putValue(Action.NAME, "Italicize Text");
        italicize.setAction(italicizeAction); //setting italic action to the italicize menu item 

        Action copyAction = new StyledEditorKit.CopyAction();
        copyAction.putValue(Action.NAME, "Copy");
        copyOption.setAction(copyAction); //setting copy action to the copy menu item

        Action pasteAction = new StyledEditorKit.PasteAction();
        pasteAction.putValue(Action.NAME, "Paste");
        pasteOption.setAction(pasteAction); //setting paste action to the paste menu item

        Action cutAction = new StyledEditorKit.CutAction();
        cutAction.putValue(Action.NAME, "Cut");
        cutOption.setAction(cutAction); //setting cut action to the cut menu item
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelForPage = new javax.swing.JPanel();
        TheTextArea = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextPane();
        topMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveFile = new javax.swing.JMenuItem();
        openFile = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        fontChangeMenu = new FontTypeMenu().getMenu();
        changeFontSizeMenu = new FontSizeMenu().getMenu();
        cutOption = new javax.swing.JMenuItem();
        copyOption = new javax.swing.JMenuItem();
        pasteOption = new javax.swing.JMenuItem();
        formatMenu = new javax.swing.JMenu();
        bold = new javax.swing.JMenuItem();
        italicize = new javax.swing.JMenuItem();
        fontChangeColour = new javax.swing.JMenuItem();
        underline = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(700, 850));
        getContentPane().setLayout(new java.awt.FlowLayout());

        panelForPage.setBackground(new java.awt.Color(255, 255, 255));
        panelForPage.setFocusable(false);
        panelForPage.setPreferredSize(new java.awt.Dimension(575, 800));
        panelForPage.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TheTextArea.setViewportView(textArea);

        panelForPage.add(TheTextArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, 435, 654));

        getContentPane().add(panelForPage);

        topMenuBar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        fileMenu.setText("File");

        saveFile.setText("Save Document");
        saveFile.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        fileMenu.add(saveFile);

        openFile.setText("Open a Document");
        openFile.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        fileMenu.add(openFile);

        topMenuBar.add(fileMenu);

        editMenu.setText("Edit");

        editMenu.add(fontChangeMenu);

        editMenu.add(changeFontSizeMenu);

        addMenuItemToMenu(cutOption, "Cut", editMenu);

        addMenuItemToMenu(copyOption, "Copy", editMenu);

        addMenuItemToMenu(pasteOption, "Paste", editMenu);

        topMenuBar.add(editMenu);

        formatMenu.setText("Format");

        addMenuItemToMenu(bold, "Bold Text", formatMenu);

        addMenuItemToMenu(italicize, "Italicize Text", formatMenu);

        addMenuItemToMenu(underline, "Underline Text", formatMenu);

        fontChangeColour.setText("Change Font Colour");
        fontChangeColour.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        fontChangeColour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontChangeColourActionPerformed(evt);
            }
        });
        formatMenu.add(fontChangeColour);

        topMenuBar.add(formatMenu);

        setJMenuBar(topMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        // TODO add your handling code here:
        doSave(); //call the doSave function from below which will save the file
    }

    private void doSave() {
        if (fileDialog == null) { //if JFileChooser dialog does not exist
            fileDialog = new JFileChooser(); //create a new one
            fileDialog.setFileFilter(new FileNameExtensionFilter("RTF text File", ".rtf")); //set the file extension to .rtf
        }
        File selectedFile;
        if (editFile == null) { //if new file is trying to be saved
            selectedFile = new File("filename.rtf"); //set intial file name in the dialog
        } else { //if file has been saved before
            selectedFile = new File(editFile.getName()); //get the name of this previously saved file
        }
        fileDialog.setSelectedFile(selectedFile); //set the file's name to the default or to the previously selected file
        fileDialog.setDialogTitle("Select File to be Saved"); //set the save dialog box title
        int option = fileDialog.showSaveDialog(this); //show the save dialog
        if (option != JFileChooser.APPROVE_OPTION) {
            return;  //user canceled or clicked the dialog's close box, return to page
        }
        selectedFile = fileDialog.getSelectedFile();
        if (selectedFile.exists()) {  //if file with same name already exists
            int response = JOptionPane.showConfirmDialog(this, //ask the user whether to replace the file
                    "The file \"" + selectedFile.getName()
                    + "\" already exists.\nDo you want to replace it?",
                    "Confirm Save",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);
            if (response != JOptionPane.YES_OPTION) {
                return;  //user does not want to replace the file, return to page without saving
            }
        }
        OutputStream out;
        try {
            out = new FileOutputStream(selectedFile); //set FileOutputStream to the file user is trying to save
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, ////if exception is caught tell user their file could not be saved
                    "Sorry, but an error occurred while trying to save the file:\n" + e);
            return; //return to page
        }
        try {
            rtfKit.write(out, textArea.getDocument(), 0, textArea.getDocument().getLength()); //write the text to the user saved file
            editFile = selectedFile; //set saved file to file being edited now
            setTitle("File Being Edited Right Now: " + editFile.getName()); //set title of window to say file just saved is being edited
        } catch (IOException | BadLocationException e) {
            JOptionPane.showMessageDialog(this, //if exception caught, tell user their file could not be written to
                    "Sorry, but an error occurred while trying to write the text:\n" + e);
        }
    }//GEN-LAST:event_saveFileActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        // TODO add your handling code here:
        doOpen(); //call the doOpen function to open the file
    }

    private void doOpen() {
        if (fileDialog == null) { //if JFileChooser does not exist
            fileDialog = new JFileChooser(); //create a new one
        }
        fileDialog.setDialogTitle("Select File to be Opened"); //set title of open dialog
        fileDialog.setSelectedFile(null);  //do not initially select any file
        int option = fileDialog.showOpenDialog(this); //show open dialog
        if (option != JFileChooser.APPROVE_OPTION) {
            return;  //user canceled or clicked the dialog's close box, so return the page without opening any file
        }
        File selectedFile = fileDialog.getSelectedFile(); //get file user has selected
        InputStream in;
        try {
            in = new FileInputStream(selectedFile); //set FileInputStream to file user is trying to open
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, //if exception is caught, tell user their file could not be opened
                    "Sorry, but an error occurred while trying to open the file:\n" + e);
            return; //return to page without opening any file
        }
        try {
            StyledDocument doc = new DefaultStyledDocument();
            textArea.getEditorKit().read(in, doc, 0); //read in the text of the user selected file
            in.close();
            textArea.setStyledDocument(doc); //set text to page
            editFile = selectedFile; //set name of file being edited to the name of file just opened
            setTitle("File Being Edited Right Now: " + editFile.getName()); //set name of window to read file just opened as being edited
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, //if exception is caught, tell user their file data could not be read
                    "Sorry, but an error occurred while trying to read the data:\n" + e);
        }
    }//GEN-LAST:event_openFileActionPerformed

    private void fontChangeColourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontChangeColourActionPerformed
        // TODO add your handling code here:
        selectedColor = JColorChooser.showDialog(this, "Pick a font color", selectedColor); //show JColorChooser and save colour user 
        //selects
        Action changeFontColorAction = new StyledEditorKit.ForegroundAction("Pick a font color", selectedColor);  //set colour of selected
        //text to user selected
        //colour
        changeFontColorAction.putValue(Action.NAME, "Change font colour");
        changeFontColorAction.actionPerformed(evt); //set this action to be performed when user clicks the font colour change menu item
    }//GEN-LAST:event_fontChangeColourActionPerformed

    private void underlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_underlineActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_underlineActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane TheTextArea;
    private javax.swing.JMenuItem bold;
    private javax.swing.JMenuItem copyOption;
    private javax.swing.JMenuItem cutOption;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fontChangeColour;
    private javax.swing.JMenu changeFontSizeMenu;
    private javax.swing.JMenu fontChangeMenu;
    private javax.swing.JMenu formatMenu;
    private javax.swing.JMenuItem italicize;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JPanel panelForPage;
    private javax.swing.JMenuItem pasteOption;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JTextPane textArea;
    private javax.swing.JMenuBar topMenuBar;
    private javax.swing.JMenuItem underline;
    // End of variables declaration//GEN-END:variables

    private void addMenuItemToMenu(javax.swing.JMenuItem menuItem, String ItemText, javax.swing.JMenu menu) {
        menuItem.setText(ItemText);
        menuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            }
        });
        menu.add(menuItem);
    }

    private void addFontTypeToMenu(javax.swing.JMenuItem menuItem, String ItemText, javax.swing.JMenu menu){
        menuItem.setFont(new java.awt.Font(ItemText, 0, 11)); // NOI18N
        menuItem.setText(ItemText);
        menu.add(menuItem);
    }

    private void createFontTypeHandler(javax.swing.JMenuItem menuItem){
        String font = menuItem.getFont().getName();
        Action fontAction = new StyledEditorKit.FontFamilyAction(font, font);
        fontAction.putValue(Action.NAME, font);
        menuItem.setAction(fontAction);
    }
}